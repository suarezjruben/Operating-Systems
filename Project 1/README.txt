
 **************************************
 * Author: Ruben Suarez               *
 * Class: Operating Systems (CS 4328) *
 * Instructor: Dr. Xiao Chen          *
 **************************************
 
 Note: use option -std=c99 or -std=gnu99 (or newer) to compile the code if you're having issues compiling on 
 eros.cs.txstate.edu or zeus.cs.txstate.edu. Example: "$gcc -std=c99 program.c -o program"

//pre.c (pre)
The first program "pre.c" reads in a list of U.S. states and their populations (multiples of million). 
To be simple, you can use the two-letter state abbreviation to represent each state. We assume there 
are at most 10 states in the list. Inputs are entered through the keyboard and the outputs are 
displayed on the screen. The inputs end when an EOF (generated by Ctrl-D) is encountered. 
The outputs of the program display the states whose populations are above 10 million. 

-How to compile:
	The following terminal command will compile pre.c and create an executable file called "pre" 
	$gcc -o pre pre.c 

-How to run:
	To run the executable simply type in the terminal the following command:
	$./pre
	
	You can then input the U.S. state abbreviations and their populations (in millions) 
	as displayed below followed by Ctrl + D on the keybard to terminate the input and 
	have the program begin to process the input.
	
	TX 26 
	NC 9
	MD 5
	NY 19
	CA 38 
	Ctrl-D (to terminate the input.)
	
-Expected output from example above:
	TX
	NY
	CA
	

//sort.c (sort)
The second program "sort.c" reads in a list of state abbreviations from stdin and
displays them in an alphabetical order on the screen. We assume there are no more than 
10 states and the sequence is read until an EOF is encountered.

-How to compile:
	The following terminal command will compile sort.c and create an executable file called "sort" 
	$gcc -o sort sort.c 

-How to run:
	To run the executable simply type in the terminal the following command:
	$./sort

	You can then input the U.S. state abbreviations as displayed below followed by 
	Ctrl + D on the keybard to terminate the input and have the program process the input.
	
	TX
	NC
	MD
	NY
	CA
	Ctrl-D (to terminate the input.)
	
-Expected output from example above:
	CA
	MD
	NC
	NY
	TX
	

//pipe.c (pipe)
This c program sets up a parent-TO-child pipe; the parent process performs 
an'exec' function that runs a "./pre" process and its outputs are sent 
to the pipe connected to the child process, which performs an 'exec' 
function that runs a "./sort" process. 

-How to compile:
	The following terminal command will compile pipe.c and create an executable file called "pipe" 
	$gcc -o pipe pipe.c

-How to run:
	To run the executable simply type in the terminal the following command:
	$./pipe
	
	This will start the "pipe" executable which will lauch the "pre" executable that will
	request the input as shown above for the "pre.c" process.
	Once the "pre" process (parent) has processed the input by the user on the keybard,
	its output will be sent to the "sort" process (child) through the pipe setup. The
	child process ("sort") will then process the output and print it out in 
	alphabetical order.

//exec.c (exec)
This program will take a UNIX command from the command lineand fork() a child to execute it. 
The command can be a simple command like: $ls or $ps, Or it can be a command with options 
such as $ls -t -l. The process id of the parent and the child will be printed out also.

-How to compile:
	The following terminal command will compile exec.c and create an executable file called "exec" 
	$gcc -o exec exec.c

-How to run:
	To run the executable simply type in the terminal one of the following example commands:
	$./exec
	$./exec ls
	$./exec ls -l
	$./exec ls -l -a
	
-Expected output from examples above:
	Output should include the parent and child pid's and the corresponding command output.
	